// -----------------------------------------------------------------------------
// This file contains all application-wide Sass mixins.
// -----------------------------------------------------------------------------

/// Event wrapper
@mixin on-event($self: false) {
  @if $self {
    &,
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  } @else {
    &:hover,
    &:active,
    &:focus {
      @content;
    }
  }
}

/// Make a context based selector a little more friendly
/// @param {String} $context
@mixin when-inside($context) {
  #{$context} & {
    @content;
  }
}

//display : flex style for all browser compatible
@mixin flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}

//display : inline-flex style for all browser compatible
@mixin inline-flex {
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
  display: inline-flex;
}

//justify content style for all browser compatible
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}

//align items style for all browser compatible
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}

//flex direction style for all browser compatible
@mixin flex-direction($value: row) {
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
  -webkit-flex-direction: $value;
  -ms-flex-direction: $value;
  flex-direction: $value;
}

//flex wrap style for all browser compatible
@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}

//flex style for all browser compatible
@mixin flex($fg: 1, $fs: 0, $fb: auto) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;

  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == "list" {
    $fg-boxflex: nth($fg, 1);
  }

  -webkit-box: $fg-boxflex;
  -moz-box: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}

//border radius style for all browser compatible
@mixin border-radius($radius) {
  border-radius: $radius;
  -webkit-border-radius: $radius;
  -ms-border-radius: $radius;
  -moz-border-radius: $radius;
  -o-border-radius: $radius;
}

//box shadow style for all browser compatible
@mixin box-shadow($shadow) {
  box-shadow: $shadow;
  -webkit-box-shadow: $shadow;
  -ms-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
  -o-box-shadow: $shadow;
}

//transition style for all browser compatible
@mixin transition($transition) {
  transition: $transition;
  -webkit-transition: $transition;
  -ms-transition: $transition;
  -moz-transition: $transition;
  -o-transition: $transition;
}

//background size style for all browser compatible
@mixin background-size($bgSize) {
  background-size: $bgSize;
  -webkit-background-size: $bgSize;
  -ms-background-size: $bgSize;
  -moz-background-size: $bgSize;
  -o-background-size: $bgSize;
}

//center div make div in center to window
@mixin center-div {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

//transform style for all browser compatible
@mixin transform($transform) {
  -webkit-transform: $transform;
  -ms-transform: $transform;
  -moz-transform: $transform;
  -o-transform: $transform;
  transform: $transform;
}

//translate style for all browser compatible
@mixin translate($x, $y) {
  -webkit-transform: translate($x, $y);
  -moz-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  -o-transform: translate($x, $y);
  transform: translate($x, $y);
}

//font size style for all browser compatible
@mixin font-size($size) {
  font-size: $size;
  font-size: ($size / 16px) * 1rem;
}

/* margin padding spacing */
$spaceamounts: (5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 75, 80, 85, 95, 100);
$sides: (top, bottom, left, right);

@each $space in $spaceamounts {
  @each $side in $sides {
    .m-#{str-slice($side, 0, 1)}-#{$space} {
      margin-#{$side}: #{$space}px !important;
    }

    .p-#{str-slice($side, 0, 1)}-#{$space} {
      padding-#{$side}: #{$space}px !important;
    }
  }
}

//media query breakpoints for different screen size
@mixin breakpoint($point) {
  @if $point==Desktop {
    @media (min-width: 1200px) {
      @content;
    }
  } @else if $point==tablet {
    @media (min-width: 992px) {
      @content;
    }
  } @else if $point==md-tablet {
    @media (min-width: 768px) {
      @content;
    }
  } @else if $point==mobile {
    @media (min-width: 481px) {
      @content;
    }
  } @else if $point==xs-mobile {
    @media (max-width: 480px) {
      @content;
    }
  } @else if $point==sm-tablet {
    @media (max-width: 767px) {
      @content;
    }
  }
}

//placeholder style for all browser compatible
@mixin placeholderColor {
  &:focus {
    outline: none;
  }
  &::placeholder {
    color: #666f77;
    opacity: 0.3;
  }

  &:-ms-input-placeholder {
    color: #28323c;
    opacity: 0.3;
  }

  &::-ms-input-placeholder {
    color: #28323c;
    opacity: 0.3;
  }
}

//appearance style for all browser compatible
@mixin appearance($value) {
  -webkit-appearance: $value;
  -moz-appearance: $value;
  appearance: $value;
}
